"""
Problem 12: Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""

# def triangular_number():
#     triangular_num = number = 1
#     while True:
#         yield triangular_num
#         number += 1
#         triangular_num += number


# def get_factors(number):
#     return [n for n in range(1, number + 1) if number % n == 0]


# triangular_number = triangular_number()

# while True:
#     triangular_num = next(triangular_number)
#     factors = get_factors(triangular_num)
#     if len(factors) > 500:
#         result = triangular_num
#         break

#     print(triangular_num, len(factors))

# print(result)

from math import sqrt
from itertools import count


# Returns the number of integers in the range [1, n] that divide n.
def num_divisors(n):
    end = int(sqrt(n))
    result = sum(2 for i in range(1, end + 1) if n % i == 0)
    if end ** 2 == n:
        result -= 1
    return result


def solution():
    triangle = 0
    for i in count(1):
        triangle += i
        if num_divisors(triangle) > 500:
            return triangle


if __name__ == "__main__":
    print(solution())
